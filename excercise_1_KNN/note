---
title: "exc1_person_indep"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(gmodels)
library(class)
library(caret)
library(swirl)
```

1.3.4 Person independent KNN: Now try to apply k-nearest neighbor classification to the complete
data set from all students attending the course.
Distinguish two cases: Having data from all individuals in the training set 
and splitting the data according to individuals. Generate and explain the results. 
```{r reading dataset}

set.seed(423)

load("data/idList-co-100.Rdata")
id <- do.call(rbind, idList[1:10])
id <- as.data.frame(id)
id$V1 <- factor(id$V1)
```

## case A:
# Having data from all individuals in the training set
``` {r case A}

load("data/idList-co-100.Rdata")
id <- do.call(rbind, idList[1:10])
id <- as.data.frame(id)
id$V1 <- factor(id$V1)

# id - huge dataframe with everyone as TRAINING
train_df <- id
id_train_labels <- train_df[,1]

# individually test sets for each person

person_error_v <- c()
for (person_df in idList){
  test_df <- person_df
  id_test_labels <- person_df[,1]
  
  # get the prediction
  numbers_test_pred <- knn(train = train_df, test = test_df,
  cl = id_train_labels, k=15)
  
  person_error <- mean(id_test_labels != numbers_test_pred)
  person_error_v <- c(person_error_v, person_error)
} 

plot(length(idList), person_error_v, type="o", ylab="misclassification error", xlab = "person")

```

```{r case A}
set.seed(423)

load("data/idList-co-100.Rdata")
id <- do.call(rbind, idList[1:10])
id <- as.data.frame(id)
id$V1 <- factor(id$V1)

accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}

k_accuracy_avg_vec <- c()
k_error_avg_vec <- c()
ks <- c(1, 5, 9, 15, 19, 25, 29)
 
for (k_now in ks ){
  #print(paste0("k_now = ", k_now))
  k_error <- 0
  k_error_avg <- 0
  k_accuracy <- 0
  k_accuracy_avg <- 0
  
  for (i in 1:10) {
    # shuffle dataset
    shuffled_df <- id[sample(nrow(id)),]
    
    # split 50/50 for training and testing data
    test_df <- shuffled_df[1:20000,]  
    train_df <- shuffled_df[20001:40000,] 
    
    # get the labels - supervision part
    id_train_labels <- train_df[,1]
    id_test_labels <- test_df[,1]
    
    # get the prediction
    numbers_test_pred <- knn(train = train_df, test = test_df,
    cl = id_train_labels, k=k_now)

    accuracy_now <- accuracy(table(numbers_test_pred,id_test_labels))
    
    k_error <- mean(id_test_labels != numbers_test_pred)
    k_accuracy <- k_accuracy + accuracy_now
  }
  # get summary of one k
  k_accuracy_avg <- k_accuracy / 10
  k_accuracy_avg_vec <- c(k_accuracy_avg_vec, k_accuracy_avg)
  
  k_error_avg <- k_error / 10
  k_error_avg_vec <- c(k_error_avg_vec, k_error_avg)
  
  print(paste0("k_now = ", k_now, "  k_accuracy_avg = ", k_accuracy_avg, " k_error_avg = ", k_error_avg ))
}
plot(ks, k_accuracy_avg_vec, type="o", ylab="accuracy")
plot(ks, k_error_avg_vec, type="o", ylab="misclassification error")

```

## case B:
# splitting the data according to individuals
``` {r case B}

set.seed(423)

load("data/idList-co-100.Rdata")
id <- do.call(rbind, idList[1:10])
id <- as.data.frame(id)
id$V1 <- factor(id$V1)

```

