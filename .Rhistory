knitr::opts_chunk$set(echo = TRUE)
library(gmodels)
library(class)
library(caret)
library(swirl)
load("data/id100.Rda")
#load("./idList-co-100.RData")
load("data/id100.Rda")
set.seed(423)
dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[100,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[99,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[80,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[100,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
View(id)
load("data/id100.Rda")
img <- data.matrix(id[1,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[2,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[3,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
load("data/id100.Rda")
img <- data.matrix(id[1,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
apple <- c('red', 'green', "yellow")
print(apple)
apple <- c('red', 'green', "yellow")
print(class(apple))
load("data/id100.Rda")
img <- data.matrix(id[1,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
rows <- sample(nrow(id))
shuffled_df <- df[rows,]
load("data/id100.Rda")
img <- data.matrix(id[1,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
rows <- sample(nrow(id))
shuffled_df <- df[rows,]
load("data/id100.Rda")
img <- data.matrix(id[1,2:235])
img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# get a list of images
image(img, col = gray(0:100/100))
#set.seed(423)
#dataset_shuffle <- id[sample(nrow(id))]
View(shuffled_df)
View(id)
id
id.id
id%id
id$X325
load("data/id100.Rda")
get_img <- function(df, sample_no){
img <- data.matrix(df[sample_no,2:235])
matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
}
#img <- data.matrix(id[1,2:235])
#img <- matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
# visualize image
image(get_img(id,1), col = gray(0:100/100))
load("data/id100.Rda")
get_img <- function(df, sample_no){
# get matrix of number from dataset
# df-dataset; sample_no - which sample to return the matrix
img <- data.matrix(df[sample_no,2:235])
matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
}
# visualize image
image(get_img(id,2), col = gray(0:100/100))
load("data/id100.Rda")
get_img <- function(df, sample_no){
# get matrix of number from dataset
# df-dataset; sample_no - which sample to return the matrix
img <- data.matrix(df[sample_no,2:235])
matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
}
# visualize image
image(get_img(id,3), col = gray(0:100/100))
# get vector of matrices with images
for ( i in 400){
print(i)
}
# get vector of matrices with images
for ( i in range(400)){
print(i)
}
# get vector of matrices with images
for ( i in 1:400){
print(i)
}
# get list of matrices with images
numbers_mat <- list()
for ( i in 1:400){
num_mat <- get_img(id,i)
numbers_mat <- append(numbers_mat, num_mat)
}
numbers_mat
View(numbers_mat)
View(num_mat)
# get list of matrices with images
numbers_mat <- list()
for ( i in 1:400){
num_mat <- get_img(id,i)
# numbers_mat <- append(numbers_mat, num_mat)
numbers_mat[[(length(numbers_mat) + 1)]] <- num_mat
}
View(numbers_mat)
# get list of matrices with images
numbers_list <- list()
for ( i in 1:400){
num_mat <- get_img(id,i)
numbers_list[[(length(numbers_list) + 1)]] <- num_mat # append list
}
View(numbers_mat)
View(numbers_mat)
sample(numbers_list)
# shuffle list
shuffled_list <- sample(numbers_list)
View(shuffled_list)
View(numbers_list)
numvers_list[1]
numbers_list[1]
image(numbers_list[1], col = gray(0:100/100))
View(numbers_list)
image(numbers_list[[1]], col = gray(0:100/100))
# shuffle list
shuffled_list <- sample(numbers_list)
image(numbers_list[[1]], col = gray(0:100/100))
image(shuffled_list[[1]], col = gray(0:100/100))
image(numbers_list[[1]], col = gray(0:100/100))
image(shuffled_list[[1]], col = gray(0:100/100))
shuffeled_list[1]
shuffled_list[1]
shuffled_list[[1]
]
shuffled_list[[1]]
shuffled_list[[1:2]]
shuffled_list[[1:3]]
shuffled_list[[1][1]]
library(swirl)
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
a <- c(z,555,z)
c(z,555,z)
z*2 + 100
sqrt(z-1)
info()
my_sqrt <- sqrt(z-1)
my_sqrt
mydiv <- z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
plants.head()
head(plants)
head(plant,10)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(platns)
str()
plants.str()
str(pplants)
str(plants)
knitr::opts_chunk$set(echo = TRUE)
library(gmodels)
library(class)
library(caret)
library(swirl)
load("data/id100.Rda")
get_img <- function(df, sample_no){
# get matrix of number from dataset
# df-dataset; sample_no - which sample to return the matrix
img <- data.matrix(df[sample_no,2:235])
matrix(img, nrow = 18, ncol = 18, byrow = FALSE)
}
# visualize image
image(get_img(id,3), col = gray(0:100/100))
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
#df_test <-
#newdf <- mydf[1:3,]
#dataset_shuffle <- id[sample(nrow(id))]
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
#df_test <-
test_df <- shuffled_df[1:200,]
#dataset_shuffle <- id[sample(nrow(id))]
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
#df_test <-
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
#dataset_shuffle <- id[sample(nrow(id))]
View(test_df)
View(train_df)
knn()
knn
?knn()
wbcd_test_pred <- knn(train = train_df, test = test_df,
cl = c(0,1,2,3,4,5,6,7,8,9), k=21)
load("id100.Rda")
#load("id100.Rda")
ran <- sample(1:nrow(id), 0.5 * nrow(id))
id_train <- id_norm[ran,]
#load("id100.Rda")
id_norm <- as.data.frame(lapply(id[,c(2:325)], nor))
library(class)
#load("id100.Rda")
id_norm <- as.data.frame(lapply(id[,c(2:325)], nor))
library(class)
#load("id100.Rda")
id_norm <- as.data.frame(lapply(id[,c(2:325)], nor))
library(class)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
#load("id100.Rda")
id_norm <- as.data.frame(lapply(id[,c(2:325)], nor))
ran <- sample(1:nrow(id), 0.5 * nrow(id))
id_train <- id_norm[ran,]
id_test <- id_norm[-ran,]
id_target_category <- id[ran,1]
id_test_category <- id[-ran,1]
library(class)
pr <- knn(id_train,id_test,cl=id_target_category,k=1)
tab <- table(pr,id_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
#THIS SHOULD WORK :
load("id100.Rda")
library(class)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
#load("id100.Rda")
id_norm <- as.data.frame(lapply(id[,c(2:325)], nor))
ran <- sample(1:nrow(id), 0.5 * nrow(id))
id_train <- id_norm[ran,]
id_test <- id_norm[-ran,]
id_target_category <- id[ran,1]
id_test_category <- id[-ran,1]
library(class)
pr <- knn(id_train,id_test,cl=id_target_category,k=1)
tab <- table(pr,id_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
nor <-function(x) { (x -min(x))/(max(x)-min(x))   }
#THIS SHOULD WORK :
#load("id100.Rda")
ran <- sample(1:nrow(id), 0.5 * nrow(id))
id_train <- id_norm[ran,]
id_test <- id_norm[-ran,]
id_target_category <- id[ran,1]
id_test_category <- id[-ran,1]
pr <- knn(id_train,id_test,cl=id_target_category,k=1)
tab <- table(pr,id_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
id_target_category <- id[rows,1]
numbers_test_pred <- knn(train = train_df, test = test_df,
cl = c(0,1,2,3,4,5,6,7,8,9), k=21)
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
id_target_category <- id[rows,1]
numbers_test_pred <- knn(train = train_df, test = test_df,
cl = id_target_category, k=21)
shuffled_df[1,]
shuffled_df[,1]
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
id_target_category <- shuffled_df[,1]
numbers_test_pred <- knn(train = train_df, test = test_df,
cl = id_target_category, k=21)
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
id_target_category <- train_df[,1]
numbers_test_pred <- knn(train = train_df, test = test_df,
cl = id_target_category, k=21)
CrossTable(x = id_test_labels, y = numbers_test_pred,
prop.chisq=FALSE)
install.packages("gmodels")
install.packages("gmodels")
knitr::opts_chunk$set(echo = TRUE)
library(gmodels)
library(class)
library(caret)
library(swirl)
CrossTable(x = id_test_labels, y = numbers_test_pred,
prop.chisq=FALSE)
load("data/id100.Rda")
set.seed(423)
# shuffle dataset
rows <- sample(nrow(id))
shuffled_df <- id[rows,]
# split 50/50 for training and testing data
test_df <- shuffled_df[1:200,]
train_df <- shuffled_df[201:400,]
id_train_labels <- train_df[,1]
id_test_labels <- train_df[,1]
numbers_test_pred <- knn(train = train_df, test = test_df,
cl = id_train_labels, k=21)
CrossTable(x = id_test_labels, y = numbers_test_pred,
prop.chisq=FALSE)
id_train_labels
View(shuffled_df)
knitr::opts_chunk$set(echo = TRUE)
library(gmodels)
library(class)
library(caret)
library(swirl)
folds <- createFolds(id$X1, k = 10)
View(folds)
folds
