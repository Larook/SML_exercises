data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
source("NN_functions/mlp_functions.R")
# numbers of neurons of hidden layers to check
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
# numbers of neurons of hidden layers to check
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
View(data_mlp_cv)
View(id_use)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
data_mlp_pca_cv <- generate_cross_validation_mlp(data=id_pca, nn_sizes_check=nn_sizes_check, csv_name="testPCA")
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
data_mlp_pca_cv <- generate_cross_validation_mlp(data=id_pca, nn_sizes_check=nn_sizes_check, csv_name="testPCA")
library(gmodels)
library(class)
library(caret)
library(swirl)
library(ggplot2)
library(spatstat)
library(rpart)
library(rpart.plot)
library(stats)
library(randomForest)
library(caret)
library(kernlab)
library(RSNNS)
library(neuralnet)
source("important_functions/load_data_id.R")
source("important_functions/get_training_test_data.R")
source("important_functions/get_normalized_data.R")
source("important_functions/get_gaussian_smoothed_data.R")
source("important_functions/view_data.R")
source("important_functions/get_k_clustered_cipher_data.R")
source("important_functions/get_PCA_reduced_data.R")
################################
# This version:
# - plots and computes computational code
# - changed to 3 hidden layers with 120 nodes like Zhuoqi and (150,100,50) for PCA part
# TODO: add pre-processing from Karol's
# TODO: Cross-validation
# TODO: mean and variance
# TODO: a function for computing + plotting run-time maybe instead of copying same code everywhere
# current issue: takes too long to run
################################
# load dataset all_in
id <- load_data_id(load_full=FALSE)
# preprocessing options
# id_smooth <- get_gaussian_smoothed_data(dataset=id, smooth_sigma=0.05)
id_norm <- get_normalized_data(id)
# which of the preprocessing to use
# id_use <- id_smooth
id_use <- id_norm
# id_use <- id
# split to train and test dataset
data_train_test_allin <- get_training_test_data_allin(data=id_use, training_percent=50)
train_data_allin <- data_train_test_allin[[1]]
test_data_allin <- data_train_test_allin[[2]]
# splitting data disjunct
data_train_test_disjunct <- get_training_test_data_disjunct(data=id_use)
train_data_disjunct <- data_train_test_disjunct[[1]]
test_data_disjunct <- data_train_test_disjunct[[2]]
# decide if doing the all_in or disjunct
# id_train <-train_data_allin
# id_test <- test_data_allin
id_train <-train_data_disjunct
id_test <- test_data_disjunct
# Now the net. Note that I am splitting the data in this way: 90% train set and 10% test set in a random way for 10 times. I am also initializing a progress bar using the plyr
#library because I want to keep an eye on the status of the process since the fitting of the neural network may take a while.
# numbers of neurons of hidden layers to check
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
# Now the net. Note that I am splitting the data in this way: 90% train set and 10% test set in a random way for 10 times. I am also initializing a progress bar using the plyr
#library because I want to keep an eye on the status of the process since the fitting of the neural network may take a while.
# numbers of neurons of hidden layers to check
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
# Now the net. Note that I am splitting the data in this way: 90% train set and 10% test set in a random way for 10 times. I am also initializing a progress bar using the plyr
#library because I want to keep an eye on the status of the process since the fitting of the neural network may take a while.
# numbers of neurons of hidden layers to check
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
data_mlp_cv <- generate_cross_validation_mlp(data=id_use, nn_sizes_check=nn_sizes_check, csv_name="test")
# TRY PCA DATA
# numbers of neurons of hidden layers to check
source("important_functions/get_PCA_reduced_data.R")
source("NN_functions/mlp_functions.R")
nn_sizes_check <- list( c(1), c(1,1), c(1,1,1))
pca_obj <- get_pca_obj(id_use)
id_pca <- get_PCA_reduced_data(labels=id_use$V1, pca_obj=pca_obj, searched_accum_var=80)
data_mlp_pca_cv <- generate_cross_validation_mlp(data=id_pca, nn_sizes_check=nn_sizes_check, csv_name="testPCA")
View(data_mlp_pca_cv)
View(data_mlp_cv)
View(data_mlp_pca_cv)
View(data_mlp_cv)
View(data_mlp_pca_cv)
View(data_mlp_cv)
View(data_mlp_pca_cv)
View(data_mlp_cv)
ggplot(data_mlp_cv, aes(accuracy_test, fill=accuracy_training ) ) +
geom_bar(position="dodge")
ggplot(data_mlp_cv, aes(accuracyTestList, fill=accuracyTrainingList ) ) +
geom_bar(position="dodge")
ggplot(data_mlp_cv) +
geom_bar(position="dodge")
ggplot(data_mlp_cv)
#+
# geom_bar(position="dodge")
ggplot(data_mlp_cv ) +
geom_bar(position="dodge")
ggplot(data_mlp_cv ) +
geom_bar(position="dodge")
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuracy_test)) # +
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuracy_test)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuracy_test)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=c(accuracy_test, accuracy_training)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuracy_test, accuracy_trainin)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_trainin, y=accuracy_test)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_trainin, y=accuracy_test)) +
geom_bar(position="dodge")
# # geom_line(aes(y=mean_time)) +
# # geom_ribbon(aes(ymax=mean_time+sd_time, ymin=mean_time-sd_time), fill="pink", alpha=.5) +
#
# geom_line(aes(y=df_50$mean_time, color="cluster init 50")) +
# geom_ribbon(aes(ymax=df_50$mean_time+df_50$sd_time, ymin=df_50$mean_time-df_50$sd_time), fill="green", alpha=.3)+
#
# geom_line(aes(y=df_75$mean_time, color="cluster init 75")) +
# geom_ribbon(aes(ymax=df_75$mean_time+df_75$sd_time, ymin=df_75$mean_time-df_75$sd_time), fill="red", alpha=.3)+
#
# geom_line(aes(y=df_100$mean_time, color="cluster init 100")) +
# geom_ribbon(aes(ymax=df_100$mean_time+df_100$sd_time, ymin=df_100$mean_time-df_100$sd_time), fill="blue", alpha=.3)+
#
# geom_line(aes(y=df_125$mean_time, color="cluster init 125")) +
# geom_ribbon(aes(ymax=df_125$mean_time+df_125$sd_time, ymin=df_125$mean_time-df_125$sd_time), fill="purple", alpha=.3)+
#
# geom_line(aes(y=df_150$mean_time, color="cluster init 150")) +
# geom_ribbon(aes(ymax=df_150$mean_time+df_150$sd_time, ymin=df_150$mean_time-df_150$sd_time), fill="brown", alpha=.3)+
#
# scale_colour_manual("",
#                     values = c("cluster init 50"="green",
#                                "cluster init 75"="red",
#                                "cluster init 100"="blue",
#                                "cluster init 125"="purple",
#                                "cluster init 150"="brown" )) +
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_trainin, y=accuracy_test)) +
geom_bar(position="dodge")
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_trainin, y=accuracy_test)) +
geom_bar(position="dodge")
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_trainin, y=accuracy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_training, y=accuracy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_training, y=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes( y=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_training, y=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=accuracy_training, y=accuraccy_test)) +
geom_bar()
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(x=c(1:accuracy_training), y=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuraccy_test)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=accuraccy_test, fill = accuracy_training)) +
geom_bar(position="dodge")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training, fill = time_eval)) +
geom_bar(position="dodge") +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]",
x="k-number of nearest neighbours")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training, fill = time_eval)) +
geom_bar(position="dodge") +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]",
x="architecture of mlp")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training, fill = time_eval)) +
geom_bar(position="dodge")  # +
# labs(title=main,
#      subtitle="accuracy of mlp",
#      caption="Source: abcd",
#      y="time [ms]",
#      x="architecture of mlp")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  # +
# labs(title=main,
#      subtitle="accuracy of mlp",
#      caption="Source: abcd",
#      y="time [ms]",
#      x="architecture of mlp")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]",
x="architecture of mlp")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]"")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  +
labs(title=main,
subtitle="accuracy of mlp",
caption="Source: abcd")
plot_accuracy
# ggplot(data_mlp_cv ) +
#   geom_bar(position="dodge")
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  # +
labs(title="main",
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]",
x="architecture of mlp")
plot_accuracy
# Plot the data
# separate rows into different architectures - create plots of comparison
plot_accuracy <- ggplot(data_mlp_cv, aes(y=time_training)) +
geom_bar(position="dodge")  # +
labs(title="main",
subtitle="accuracy of mlp",
caption="Source: abcd",
y="time [ms]",
x="architecture of mlp")
plot_accuracy
